name: "üöÄ Deploy Infra AWS com Terraform e Ansible"

on:
  workflow_dispatch:
    inputs:
      destroy:
        description: 'Marque para DESTRUIR a infraestrutura.'
        required: true
        type: boolean
        default: false

# Permiss√µes para autentica√ß√£o segura na AWS (OIDC) e para ler o c√≥digo
permissions:
  id-token: write
  contents: read

jobs:
  # =================================================================
  # JOB 1: VALIDATE - Verifica a qualidade do c√≥digo Terraform
  # =================================================================
  validate:
    if: github.event.inputs.destroy == 'false' # <-- CORRIGIDO
    name: "1. ‚úÖ Validar C√≥digo Terraform"
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./infra

    steps:
      - name: "Faz o checkout do c√≥digo"
        uses: actions/checkout@v4

      - name: "Configura o Terraform"
        uses: hashicorp/setup-terraform@v3

      - name: "Configura Credenciais da AWS"
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "us-east-1" # Ou sua regi√£o

      - name: "Terraform Init"
        id: init
        run: terraform init

      - name: "Terraform Validate"
        id: validate
        run: terraform validate

      - name: "Terraform Plan"
        id: plan
        run: terraform plan -no-color -input=false
        env:
          TF_VAR_admin_password: ${{ secrets.TF_VAR_admin_password }}

  # =================================================================
  # JOB 2: DEPLOY - Cria a infra com Terraform e configura com Ansible
  # =================================================================
  deploy:
    if: github.event.inputs.destroy == 'false' # <-- CORRIGIDO
    name: "2. üöÄ Deploy e Configura√ß√£o"
    needs: validate # Depende do sucesso do job 'validate'
    runs-on: ubuntu-latest
    
    # Define as sa√≠das deste job para serem usadas pelo pr√≥ximo
    outputs:
      public_ip: ${{ steps.get_outputs.outputs.public_ip }}
      instance_id: ${{ steps.get_outputs.outputs.instance_id }}

    steps:
      - name: "Faz o checkout do c√≥digo"
        uses: actions/checkout@v4

      - name: "Configura o Terraform"
        uses: hashicorp/setup-terraform@v3

      - name: "Configura Credenciais da AWS"
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "us-east-1"

      - name: "Terraform Apply"
        working-directory: ./infra
        run: terraform apply -auto-approve -input=false
        env:
          TF_VAR_admin_password: ${{ secrets.TF_VAR_admin_password }}

      - name: "Captura Outputs do Terraform"
        id: get_outputs
        working-directory: ./infra
        run: |
          echo "public_ip=$(terraform output -raw instance_public_ip)" >> $GITHUB_OUTPUT
          echo "instance_id=$(terraform output -raw instance_id)" >> $GITHUB_OUTPUT

      - name: "Instala Ansible e sshpass"
        run: |
          sudo apt-get update
          sudo apt-get install -y ansible sshpass

      - name: "Cria Invent√°rio Ansible dinamicamente"
        run: |
          # Cria um arquivo tempor√°rio para a chave SSH
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > key.pem
          chmod 600 key.pem

          echo "[ec2_instances]" > inventory
          echo "${{ steps.get_outputs.outputs.public_ip }} ansible_user=ubuntu ansible_ssh_private_key_file=./key.pem ansible_ssh_common_args='-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'" >> inventory

      - name: "Executa Playbook Ansible"
        run: |
          # Aguarda a porta SSH estar dispon√≠vel
          echo "Aguardando a porta SSH ficar dispon√≠vel..."
          sleep 15 # Um tempo inicial para a VM iniciar
          ssh -i key.pem -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ubuntu@${{ steps.get_outputs.outputs.public_ip }} "while ! sudo lsof -i:22; do sleep 5; done"
          
          echo "Executando o playbook..."
          ansible-playbook -i inventory ansible/playbook.yml

  # =================================================================
  # JOB 3: POST-TESTS - Verifica se a infra est√° funcionando
  # =================================================================
  post-tests:
    if: github.event.inputs.destroy == 'false' # <-- CORRIGIDO
    name: "3. ‚úÖ P√≥s-Testes de Infra"
    needs: deploy # Depende do sucesso do job 'deploy'
    runs-on: ubuntu-latest
    
    steps:
      - name: "Configura Credenciais da AWS"
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "us-east-1"

      - name: "Testar aplica√ß√£o na Porta 8081"
        run: |
          echo "Aguardando aplica√ß√£o subir..."
          sleep 45 # D√° um tempo para o container Docker iniciar
          
          response=$(curl -s -o /dev/null -w "%{http_code}" http://${{ needs.deploy.outputs.public_ip }}:8081/api/hello  )
          
          if [ "$response" != "200" ]; then
            echo "‚ùå Aplica√ß√£o n√£o respondeu como esperado na porta 8081. Status HTTP: $response"
            exit 1
          else
            echo "‚úÖ Aplica√ß√£o respondeu com sucesso na porta 8081!"
          fi

      - name: "Verificar status da Inst√¢ncia EC2"
        run: |
          status=$(aws ec2 describe-instance-status --instance-ids ${{ needs.deploy.outputs.instance_id }} --query "InstanceStatuses[0].InstanceState.Name" --output text)
          
          echo "Status da Inst√¢ncia EC2: $status"
          
          if [ "$status" != "running" ]; then
              echo "‚ùå A Inst√¢ncia EC2 n√£o est√° em execu√ß√£o!"
              exit 1
          else
              echo "‚úÖ Inst√¢ncia EC2 est√° rodando com sucesso!"
          fi

  # =================================================================
  # JOB 4: DESTROY - Destr√≥i a infraestrutura criada
  # =================================================================
  destroy:
    if: github.event.inputs.destroy == 'true' # <-- CORRIGIDO
    name: "4. üß® Destruir Infraestrutura"
    runs-on: ubuntu-latest

    steps:
      - name: "Faz o checkout do c√≥digo"
        uses: actions/checkout@v4

      - name: "Configura o Terraform"
        uses: hashicorp/setup-terraform@v3

      - name: "Configura Credenciais da AWS"
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "us-east-1"

      - name: "Terraform Init & Destroy"
        working-directory: ./infra
        run: |
          terraform init
          terraform destroy -auto-approve -input=false
        env:
          TF_VAR_admin_password: ${{ secrets.TF_VAR_admin_password }}
name: "üöÄ Deploy Infra AWS com Terraform e Ansible"

on:
  workflow_dispatch:
    inputs:
      destroy:
        description: 'Marque para DESTRUIR a infraestrutura.'
        required: true
        type: boolean
        default: false

# Permiss√µes para autentica√ß√£o segura na AWS (OIDC) e para ler o c√≥digo
permissions:
  id-token: write
  contents: read

jobs:
  # =================================================================
  # JOB 1: VALIDATE - Verifica a qualidade do c√≥digo Terraform
  # =================================================================
  validate:
    if: github.event.inputs.destroy == 'false' # <-- CORRIGIDO
    name: "1. ‚úÖ Validar C√≥digo Terraform"
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./infra

    steps:
      - name: "Faz o checkout do c√≥digo"
        uses: actions/checkout@v4

      - name: "Configura o Terraform"
        uses: hashicorp/setup-terraform@v3

      - name: "Configura Credenciais da AWS"
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "us-east-1" # Ou sua regi√£o

      - name: "Terraform Init"
        id: init
        run: terraform init

      - name: "Terraform Validate"
        id: validate
        run: terraform validate

      - name: "Terraform Plan"
        id: plan
        run: terraform plan -no-color -input=false
        env:
          TF_VAR_admin_password: ${{ secrets.TF_VAR_admin_password }}

  # =================================================================
  # JOB 2: DEPLOY - Cria a infra com Terraform e configura com Ansible
  # =================================================================
  deploy:
    if: github.event.inputs.destroy == 'false' # <-- CORRIGIDO
    name: "2. üöÄ Deploy e Configura√ß√£o"
    needs: validate # Depende do sucesso do job 'validate'
    runs-on: ubuntu-latest
    
    # Define as sa√≠das deste job para serem usadas pelo pr√≥ximo
    outputs:
      public_ip: ${{ steps.get_outputs.outputs.public_ip }}
      instance_id: ${{ steps.get_outputs.outputs.instance_id }}

    steps:
      - name: "Faz o checkout do c√≥digo"
        uses: actions/checkout@v4

      - name: "Configura o Terraform"
        uses: hashicorp/setup-terraform@v3

      - name: "Configura Credenciais da AWS"
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "us-east-1"

      - name: "Terraform Apply"
        working-directory: ./infra
        run: terraform apply -auto-approve -input=false
        env:
          TF_VAR_admin_password: ${{ secrets.TF_VAR_admin_password }}

      - name: "Captura Outputs do Terraform"
        id: get_outputs
        working-directory: ./infra
        run: |
          echo "public_ip=$(terraform output -raw instance_public_ip)" >> $GITHUB_OUTPUT
          echo "instance_id=$(terraform output -raw instance_id)" >> $GITHUB_OUTPUT

      - name: "Instala Ansible e sshpass"
        run: |
          sudo apt-get update
          sudo apt-get install -y ansible sshpass

      - name: "Cria Invent√°rio Ansible dinamicamente"
        run: |
          # Cria um arquivo tempor√°rio para a chave SSH
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > key.pem
          chmod 600 key.pem

          echo "[ec2_instances]" > inventory
          echo "${{ steps.get_outputs.outputs.public_ip }} ansible_user=ubuntu ansible_ssh_private_key_file=./key.pem ansible_ssh_common_args='-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'" >> inventory

      - name: "Executa Playbook Ansible"
        run: |
          # Aguarda a porta SSH estar dispon√≠vel
          echo "Aguardando a porta SSH ficar dispon√≠vel..."
          sleep 15 # Um tempo inicial para a VM iniciar
          ssh -i key.pem -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ubuntu@${{ steps.get_outputs.outputs.public_ip }} "while ! sudo lsof -i:22; do sleep 5; done"
          
          echo "Executando o playbook..."
          ansible-playbook -i inventory ansible/playbook.yml

  # =================================================================
  # JOB 3: POST-TESTS - Verifica se a infra est√° funcionando
  # =================================================================
  post-tests:
    if: github.event.inputs.destroy == 'false' # <-- CORRIGIDO
    name: "3. ‚úÖ P√≥s-Testes de Infra"
    needs: deploy # Depende do sucesso do job 'deploy'
    runs-on: ubuntu-latest
    
    steps:
      - name: "Configura Credenciais da AWS"
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "us-east-1"

      - name: "Testar aplica√ß√£o na Porta 8081"
        run: |
          echo "Aguardando aplica√ß√£o subir..."
          sleep 45 # D√° um tempo para o container Docker iniciar
          
          response=$(curl -s -o /dev/null -w "%{http_code}" http://${{ needs.deploy.outputs.public_ip }}:8081/api/hello  )
          
          if [ "$response" != "200" ]; then
            echo "‚ùå Aplica√ß√£o n√£o respondeu como esperado na porta 8081. Status HTTP: $response"
            exit 1
          else
            echo "‚úÖ Aplica√ß√£o respondeu com sucesso na porta 8081!"
          fi

      - name: "Verificar status da Inst√¢ncia EC2"
        run: |
          status=$(aws ec2 describe-instance-status --instance-ids ${{ needs.deploy.outputs.instance_id }} --query "InstanceStatuses[0].InstanceState.Name" --output text)
          
          echo "Status da Inst√¢ncia EC2: $status"
          
          if [ "$status" != "running" ]; then
              echo "‚ùå A Inst√¢ncia EC2 n√£o est√° em execu√ß√£o!"
              exit 1
          else
              echo "‚úÖ Inst√¢ncia EC2 est√° rodando com sucesso!"
          fi

  # =================================================================
  # JOB 4: DESTROY - Destr√≥i a infraestrutura criada
  # =================================================================
  destroy:
    if: github.event.inputs.destroy == 'true' # <-- CORRIGIDO
    name: "4. üß® Destruir Infraestrutura"
    runs-on: ubuntu-latest

    steps:
      - name: "Faz o checkout do c√≥digo"
        uses: actions/checkout@v4

      - name: "Configura o Terraform"
        uses: hashicorp/setup-terraform@v3

      - name: "Configura Credenciais da AWS"
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "us-east-1"

      - name: "Terraform Init & Destroy"
        working-directory: ./infra
        run: |
          terraform init
          terraform destroy -auto-approve -input=false
        env:
          TF_VAR_admin_password: ${{ secrets.TF_VAR_admin_password }}
