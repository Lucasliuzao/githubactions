name: Java CI - Build and Push to AWS ECR

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
  IMAGE_NAME: java-hello-world-api

jobs:
  build-and-push:
    name: Build, Scan and Push to ECR
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: 1. Checkout do cÃ³digo
        uses: actions/checkout@v4

      - name: 2. Configurar Java (JDK 17)
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: 3. Build e Testes com Maven
        run: mvn -B package --file pom.xml

      - name: 4. Configurar Credenciais da AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: 5. Login no Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: 6. Definir Tag e Fazer Build da Imagem Docker
        id: build-image
        run: |
          IMAGE_TAG=${{ github.sha }}
          docker build -t ${{ env.ECR_REPOSITORY }}:${IMAGE_TAG} .
          echo "image_tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT

      - name: 7. Scan de Vulnerabilidades com Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.ECR_REPOSITORY }}:${{ steps.build-image.outputs.image_tag }}'
          format: 'table'
          exit-code: '0'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

      - name: 8. Push da Imagem para o Amazon ECR
        run: |
          echo "Enviando imagem para o ECR..."
          docker push ${{ env.ECR_REPOSITORY }}:${{ steps.build-image.outputs.image_tag }}
